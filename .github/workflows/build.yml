name: Build
run-name: ${{ github.actor }} running Build
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, develop ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: ./deploy/dependencies/install_dependencies_ubuntu.sh
      shell: bash
    - name: Build
      run: ./deploy/build.sh
      shell: bash
    - name: Install
      run: ./deploy/install.sh
      shell: bash
  run-kernel-module-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: ./deploy/dependencies/install_dependencies_ubuntu.sh
      shell: bash
    - name: Build
      run: ./deploy/build.sh
      shell: bash
    - name: Reload First
      run: ./deploy/reload.sh
      shell: bash
    - name: Reload Second
      run: ./deploy/reload.sh
      shell: bash
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Install Development Dependencies
        run: ./deploy/dependencies/install_development_dependencies_ubuntu.sh
        shell: bash
      - name: Lint with Linux checkpath
        if: always()
        run: ./tests/test_checkpath.sh
        shell: bash
      - name: Lint with pylint
        if: always()
        run: ./tests/test_python.sh
        shell: bash
      - name: Test python CLI
        if: always()
        run: ./tests/test_python_cli.sh
        shell: bash
      - name: Test python GUI
        if: always()
        run: ./tests/test_python_gui.sh
        shell: bash
      - name: Install python package
        if: always()
        run: ./deploy/build_python.sh
        shell: bash
  test-in-docker-container:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: ./deploy/build_containers.sh
      shell: bash
  release-kernel-patch:
    needs: [build, run-kernel-module-test, run-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build kernel patch
      run: ./deploy/build_kernelpatch.sh
      shell: bash
    - name: Create tag
      id: create_tag
      run: |
        tag=$(basename "${{ github.ref }}")
        echo "tag=$tag" >> $GITHUB_OUTPUT
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag }}
        release_name: ${{ steps.create_tag.outputs.tag }}
        draft: true
        prerelease: false
    - name: Upload Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/linux/linux/0001-Add-legion-laptop-v0.1.patch
        asset_name: 0001-Add-legion-laptop-v0.1.patch
        asset_content_type: text/plain
    - name: Publish Release
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}